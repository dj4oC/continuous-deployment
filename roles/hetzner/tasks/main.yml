---

- name: get hcloud api key from environment
  set_fact:
    hcloud_api_token: "{{ lookup('env', 'HCLOUD_API_TOKEN') }}"

- name: reset values
  set_fact:
    hcloud_server: {"hcloud_server_info":[]}
    hcloud_server_labels: {}
    ansible_user: "root"

- name: Gather hcloud server infos
  hcloud_server_info:
    api_token: "{{ hcloud_api_token }}"
    name: "{{ server.name }}"
  register: hcloud_server

- name: extract hcloud server info
  set_fact:
    hcloud_server: "{{ hcloud_server.hcloud_server_info }}"

- name: set current labels if server already exists
  set_fact:
    hcloud_server_labels: "{{ hcloud_server[0].labels }}"
  when: hcloud_server | length > 0

- name: get ansible user from hcloud server label
  set_fact:
    ansible_user: "{{ hcloud_server_labels.ansible_user }}"
  when: hcloud_server_labels.ansible_user is defined

- name: change add ansible_user label for next run (assumes that user will be changed to admin)
  set_fact:
    hcloud_server_labels: "{{ hcloud_server_labels | combine({'ansible_user': 'admin'}) }}"
  when: hcloud_server_labels.ansible_user is not defined

- name: update labels
  set_fact:
    hcloud_server_labels: "{{ hcloud_server_labels | combine(server.labels) }}"

- name: Create a basic server with ssh key
  hcloud_server:
    api_token: "{{ hcloud_api_token }}"
    name: "{{ server.name }}"
    server_type: "{{ server.server_type }}"
    image: "{{ server.image }}"
    location: "{{ server.location }}"
    ssh_keys:
      - wkloucek@owncloud.com
    labels: "{{ hcloud_server_labels }}"
    state: present
  register: hcloud_server

- name: extract hcloud server info
  set_fact:
    hcloud_server: "{{ hcloud_server.hcloud_server }}"

- name: add hcloud server to inventory
  add_host:
    hostname: "{{ hcloud_server.name }}"
    ansible_ssh_host: "{{ hcloud_server.ipv4_address }}"
    ansible_user: "{{ ansible_user }}"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  args: "{{ server.vars }}"
